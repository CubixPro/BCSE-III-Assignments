{"ast":null,"code":"var _jsxFileName = \"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport RoomUserList from '../RoomUserList/RoomUserList';\nimport RoomInputField from '../RoomInputField/RoomInputField';\nimport RoomList from '../RoomList/RoomList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('broadcast');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState(''); // track state of a single message\n\n  const [messages, setMessages] = useState([]); // track state of all the messages\n\n  const ENDPOINT = 'localhost:5000';\n  const [roomName, setRoomName] = useState(''); // roomName to be send to server\n\n  const [allRooms, setAllRooms] = useState(['r/broadcast']);\n  const [type, setType] = useState('r'); // type can be r or u\n  //const [messageStore, setMessageStore] = useState([{room: 'r/broadcast', messages: []}])\n\n  let temporary;\n  const messageStore = [{\n    room: 'r/broadcast',\n    messages: []\n  }];\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); // returns a json and we are restructing the object to name=name and room=room\n    // we also could have const data = ... and data.room or data.name\n\n    socket = io(ENDPOINT);\n    setName(name);\n\n    if (type === 'r') {\n      socket.emit('join', {\n        name: name,\n        room: room\n      }, error => {\n        if (error) alert(error);\n      }); // eventName, actual payload\n    }\n\n    if (type === 'u') {\n      socket.emit('join_private_chat', {\n        otherPersonName: room\n      }, error => {\n        if (error) alert(error);\n      });\n    } // this return statement is used for unmounting of the data\n    // return ()=> {\n    //     socket.emit(\"disconnect\");\n    //     socket.off();\n    // } ;\n\n  }, [ENDPOINT, location.search, room]); // basically if they changes we need to rerender the whole part\n  // hooks for handling messages\n\n  useEffect(() => {\n    socket.on('message', message => {\n      // admin generated messages\n      //setMessages(messages => [...messages, message]);\n      const messageToStore = {\n        user: message.user,\n        text: message.text\n      };\n      const currRoom = 'r/'.concat(message.room); //  setMessageStore(messageStore => {\n      //     const nowRoomIndex = messageStore.findIndex((obj)=> obj.room === currRoom)\n      //     if(nowRoomIndex !== -1)\n      //         messageStore[nowRoomIndex].messages.push(messageToStore)\n      //     else{\n      //         messageStore.push({room: `${currRoom}`, users: []})\n      //         const len = messageStore.length()\n      //         messageStore[len-1].messages.push(messageToStore)\n      //     }\n      //  })\n\n      const nowRoomIndex = messageStore.findIndex(obj => obj.room === currRoom);\n\n      if (nowRoomIndex !== -1) {\n        messageStore[nowRoomIndex].messages.push(messageToStore);\n        setMessages([...messageStore[nowRoomIndex].messages]);\n      } else {\n        messageStore.push({\n          room: `${currRoom}`,\n          messages: []\n        });\n        const len = messageStore.length();\n        messageStore[len - 1].messages.push(messageToStore);\n        setMessages([...messageStore[len - 1].messages]);\n      }\n    });\n    socket.on(\"roomData\", ({\n      room: room,\n      users: users\n    }) => {\n      setUsers(users);\n    });\n    socket.on(\"private_message\", message => {\n      // setMessages(messages => [...messages, message]);\n      // setUsers('')\n      const currUserName = 'u/'.concat(message.user);\n      const nowUserIndex = messageStore.findIndex(obj => obj.room === currUserName);\n\n      if (nowUserIndex !== -1) {\n        // already found \n        messageStore[nowUserIndex].messages.push({\n          user: message.user,\n          text: message.text\n        });\n        setMessages([...messageStore[nowUserIndex].messages]);\n      } else {\n        messageStore.push({\n          room: `${currUserName}`,\n          messages: []\n        });\n        const len = messageStore.length();\n        messageStore[len - 1].messages.push({\n          user: message.user,\n          text: message.text\n        });\n        setMessages([...messageStore[len - 1].messages]);\n      }\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message && type === 'r') {\n      socket.emit('sendMessage', {\n        room: room,\n        message: message\n      }, () => setMessage('')); // 3rd parameter is a cleanup code for textField\n    } else if (message && type == 'u') {\n      socket.emit('private_message', {\n        myName: name,\n        userName: room,\n        message: message\n      }, () => setMessage(''));\n    } else {\n      alert(\"Invalid userName\");\n    }\n  };\n\n  const addRoom = event => {\n    event.preventDefault();\n\n    if (roomName && roomName.startsWith('r/')) {\n      //socket.emit('join',{name: name , room: roomName.substring(2)})\n      setAllRooms(allRooms => [...allRooms, roomName]);\n      setType('r');\n      setRoom(roomName.substring(2));\n      setRoomName(\"\"); // hopefully does the cleanup\n\n      console.log(allRooms);\n    } else if (roomName && roomName.startsWith('u/')) {\n      //socket.emit('join private chat', {otherPersonName: roomName.substring(2)})\n      setAllRooms(allRooms => [...allRooms, roomName]);\n      setType('u');\n      setRoom(roomName.substring(2));\n      setRoomName(\"\"); // hopefully does the cleanup\n    } else {\n      setRoomName(\"\");\n      alert(\"Invalid name!!!\");\n    } //console.log(\"hello!\")\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roomsOfAUser\",\n      children: [/*#__PURE__*/_jsxDEV(RoomInputField, {\n        room: roomName,\n        setRoom: setRoomName,\n        addRoom: addRoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RoomList, {\n        allRooms: allRooms,\n        addRoom: addRoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        type: type,\n        name: name,\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roomUserLists\",\n      children: /*#__PURE__*/_jsxDEV(RoomUserList, {\n        users: users\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"QKnTFXYd4BRhbm9PEbIBwioXE0A=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","io","queryString","InfoBar","Input","Messages","RoomUserList","RoomInputField","RoomList","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ENDPOINT","roomName","setRoomName","allRooms","setAllRooms","type","setType","temporary","messageStore","parse","search","emit","error","alert","otherPersonName","on","messageToStore","user","text","currRoom","concat","nowRoomIndex","findIndex","obj","push","len","length","currUserName","nowUserIndex","sendMessage","event","preventDefault","myName","userName","addRoom","startsWith","substring","console","log"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\n\n\nimport './Chat.css';\n\nimport InfoBar          from '../InfoBar/InfoBar'\nimport Input            from '../Input/Input'\nimport Messages         from '../Messages/Messages'\nimport RoomUserList     from '../RoomUserList/RoomUserList'\nimport RoomInputField   from '../RoomInputField/RoomInputField'\nimport RoomList         from '../RoomList/RoomList'\nlet socket;\n\n\nconst Chat = ({ location }) => {\n\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('broadcast');\n    const [users, setUsers] = useState('');\n    const [message, setMessage] = useState(''); // track state of a single message\n    const [messages, setMessages] = useState([]);// track state of all the messages\n    const ENDPOINT = 'localhost:5000';\n\n\n\n    const [roomName, setRoomName] = useState(''); // roomName to be send to server\n    const [allRooms, setAllRooms] = useState(['r/broadcast'])\n    const [type, setType] = useState('r') // type can be r or u\n    //const [messageStore, setMessageStore] = useState([{room: 'r/broadcast', messages: []}])\n    let temporary;\n    const messageStore = [{room: 'r/broadcast', messages: []}]\n    useEffect(()=>{\n\n        const { name, room } = queryString.parse(location.search);\n        // returns a json and we are restructing the object to name=name and room=room\n        // we also could have const data = ... and data.room or data.name\n        \n        socket = io(ENDPOINT);\n        setName(name);\n\n        if(type === 'r'){\n            socket.emit('join', {name: name, room: room}, (error)=>{\n                if(error) alert(error);\n            }); // eventName, actual payload\n        }\n\n        if(type === 'u')\n        {\n            socket.emit('join_private_chat', {otherPersonName: room}, (error)=> {\n                if(error) \n                    alert(error)\n            })\n        }\n        \n       \n        // this return statement is used for unmounting of the data\n\n        // return ()=> {\n        //     socket.emit(\"disconnect\");\n        //     socket.off();\n        // } ;\n\n    }, [ENDPOINT, location.search, room]);\n    // basically if they changes we need to rerender the whole part\n\n\n\n    // hooks for handling messages\n    useEffect(()=> {\n\n        socket.on('message',(message)=>{\n             // admin generated messages\n             //setMessages(messages => [...messages, message]);\n\n             const messageToStore = {user: message.user, text: message.text}\n             const currRoom = 'r/'.concat(message.room)\n\n            //  setMessageStore(messageStore => {\n            //     const nowRoomIndex = messageStore.findIndex((obj)=> obj.room === currRoom)\n            //     if(nowRoomIndex !== -1)\n            //         messageStore[nowRoomIndex].messages.push(messageToStore)\n\n            //     else{\n            //         messageStore.push({room: `${currRoom}`, users: []})\n            //         const len = messageStore.length()\n\n            //         messageStore[len-1].messages.push(messageToStore)\n            //     }\n            //  })\n\n            const nowRoomIndex = messageStore.findIndex((obj)=> obj.room === currRoom)\n            if(nowRoomIndex !== -1){\n                messageStore[nowRoomIndex].messages.push(messageToStore)\n                setMessages([...messageStore[nowRoomIndex].messages])\n            }\n            else{\n                messageStore.push({room: `${currRoom}`, messages: []})\n                const len = messageStore.length()\n                messageStore[len-1].messages.push(messageToStore)\n                setMessages([...messageStore[len-1].messages])\n            }\n\n        });\n\n        socket.on(\"roomData\", ({room: room, users: users }) => {\n            setUsers(users);\n        });\n\n        socket.on(\"private_message\", (message)=> {\n            // setMessages(messages => [...messages, message]);\n            // setUsers('')\n            const currUserName = 'u/'.concat(message.user)\n            const nowUserIndex = messageStore.findIndex((obj)=> obj.room === currUserName)\n            if(nowUserIndex !== -1)\n            {\n                // already found \n                messageStore[nowUserIndex].messages.push({user: message.user, text: message.text})\n                setMessages([...messageStore[nowUserIndex].messages])\n            }\n            else{\n                messageStore.push({room: `${currUserName}`, messages: []})\n                const len = messageStore.length()\n                messageStore[len-1].messages.push({user: message.user, text: message.text})\n                setMessages([...messageStore[len-1].messages])\n            }\n        })\n\n    }, []);\n\n    const sendMessage = (event)=> {\n        event.preventDefault();\n\n        if(message && type === 'r'){\n            socket.emit('sendMessage',{ room:room, message: message}, ()=> setMessage(''));\n            // 3rd parameter is a cleanup code for textField\n        }\n        else if(message && type == 'u'){\n            socket.emit('private_message', {myName: name, userName: room, message: message}, ()=> setMessage(''))\n        }\n        else{\n            alert(\"Invalid userName\")\n        }\n    }\n\n    const addRoom = (event)=>{\n        event.preventDefault();\n        if(roomName && roomName.startsWith('r/'))\n        {\n            //socket.emit('join',{name: name , room: roomName.substring(2)})\n            \n\n            setAllRooms(allRooms => [...allRooms, roomName])\n            setType('r')\n            setRoom(roomName.substring(2))\n            setRoomName(\"\") // hopefully does the cleanup\n            console.log(allRooms)\n        }\n\n        else if(roomName && roomName.startsWith('u/'))\n        {\n            //socket.emit('join private chat', {otherPersonName: roomName.substring(2)})\n            setAllRooms(allRooms => [...allRooms, roomName])\n            setType('u')\n            setRoom(roomName.substring(2))\n            setRoomName(\"\") // hopefully does the cleanup\n        }\n        else\n        {\n            setRoomName(\"\")\n            alert(\"Invalid name!!!\")\n        }\n        //console.log(\"hello!\")\n    }\n    \n    return (\n        <div className='outerContainer'>\n            <div className='roomsOfAUser'>\n                <RoomInputField room= {roomName} setRoom ={setRoomName} addRoom={addRoom}/>\n                <RoomList allRooms={allRooms} addRoom={addRoom}/> \n            </div>\n\n            <div className='container'> \n                <InfoBar room={ room }/>\n                <Messages messages={messages} type= {type} name={name} room={room} />\n                <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n                \n                {/* <input \n                value={message} \n                onChange={(event)=> setMessage(event.target.value)}\n                onKeyPress= {(event)=> event.key === 'Enter' ? sendMessage(event) : null}  */}\n            </div>\n\n            <div className='roomUserLists'>\n            <RoomUserList users={users}/>\n            </div>\n           \n        </div>\n    )\n};\nexport default Chat;"]},"metadata":{},"sourceType":"module"}