{"ast":null,"code":"var _jsxFileName = \"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\nimport './Chat.css';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport Messages from '../Messages/Messages';\nimport RoomUserList from '../RoomUserList/RoomUserList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState(''); // track state of a single message\n\n  const [messages, setMessages] = useState([]); // track state of all the messages\n\n  const ENDPOINT = 'localhost:5000';\n  const [roomName, setRoomName] = useState(''); // roomName to be send to server\n\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); // returns a json and we are restructing the object to name=name and room=room\n    // we also could have const data = ... and data.room or data.name\n\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name: name,\n      room: room\n    }, error => {\n      if (error) alert(error);\n    }); // eventName, actual payload\n    // this return statement is used for unmounting of the data\n\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]); // basically if they changes we need to rerender the whole part\n  // hooks for handling messages\n\n  useEffect(() => {\n    socket.on('message', message => {\n      // admin generated messages\n      setMessages(messages => [...messages, message]);\n    });\n    socket.on(\"roomData\", ({\n      room,\n      users\n    }) => {\n      setUsers(users);\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', {\n        room,\n        message\n      }, () => setMessage('')); // 3rd parameter is a cleanup code for textField\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"roomsOfAUser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(RoomUserList, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"5HpTtmpsVjp1eL+sOwFI80gXEPM=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","io","queryString","InfoBar","Input","Messages","RoomUserList","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ENDPOINT","roomName","setRoomName","parse","search","emit","error","alert","off","on","sendMessage","event","preventDefault"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\n\n\nimport './Chat.css';\n\nimport InfoBar from '../InfoBar/InfoBar'\nimport Input from '../Input/Input'\nimport Messages from '../Messages/Messages'\nimport RoomUserList from '../RoomUserList/RoomUserList'\nlet socket;\n\n\nconst Chat = ({ location }) => {\n\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [users, setUsers] = useState('');\n    const [message, setMessage] = useState(''); // track state of a single message\n    const [messages, setMessages] = useState([]);// track state of all the messages\n    const ENDPOINT = 'localhost:5000';\n\n\n\n    const [roomName, setRoomName] = useState(''); // roomName to be send to server\n        \n\n    useEffect(()=>{\n\n        const { name, room } = queryString.parse(location.search);\n        // returns a json and we are restructing the object to name=name and room=room\n        // we also could have const data = ... and data.room or data.name\n        \n        socket = io(ENDPOINT);\n        setName(name);\n        setRoom(room);\n\n        socket.emit('join', {name: name, room: room}, (error)=>{\n            if(error) alert(error);\n        }); // eventName, actual payload\n       \n        // this return statement is used for unmounting of the data\n\n        return ()=> {\n            socket.emit(\"disconnect\");\n            socket.off();\n        } ;\n\n    }, [ENDPOINT, location.search]);\n    // basically if they changes we need to rerender the whole part\n\n\n\n    // hooks for handling messages\n    useEffect(()=> {\n\n        socket.on('message',(message)=>{\n             // admin generated messages\n             setMessages(messages => [...messages, message]);\n        });\n\n        socket.on(\"roomData\", ({room, users }) => {\n            setUsers(users);\n        });\n    }, []);\n\n    const sendMessage = (event)=> {\n        event.preventDefault();\n\n        if(message){\n            socket.emit('sendMessage',{ room, message}, ()=> setMessage(''));\n            // 3rd parameter is a cleanup code for textField\n        }\n    }\n\n    \n    return (\n        <div className='outerContainer'>\n            <div className='roomsOfAUser'>\n                {/* <RoomInputField room= {roomName} setRoom ={setRoomName} /> */}\n                {/* <RoomList /> */}\n            </div>\n            <div className='container'> \n                <InfoBar room={ room }/>\n                <Messages messages={messages} name={name}/>\n                <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n                \n                {/* <input \n                value={message} \n                onChange={(event)=> setMessage(event.target.value)}\n                onKeyPress= {(event)=> event.key === 'Enter' ? sendMessage(event) : null}  */}\n            </div>\n            <RoomUserList users={users}/>\n        </div>\n    )\n};\nexport default Chat;"]},"metadata":{},"sourceType":"module"}