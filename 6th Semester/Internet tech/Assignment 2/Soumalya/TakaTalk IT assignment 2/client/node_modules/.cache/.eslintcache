[{"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/index.js":"1","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/App.js":"2","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Join/Join.js":"3","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Chat/Chat.js":"4","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/InfoBar/InfoBar.js":"5","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Input/Input.js":"6","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Messages/Messages.js":"7","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Messages/Message/Message.js":"8","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/RoomUserList/RoomUserList.js":"9","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/RoomInputField/RoomInputField.js":"10","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/RoomList/RoomList.js":"11"},{"size":147,"mtime":1615404600013,"results":"12","hashOfConfig":"13"},{"size":351,"mtime":1615404600009,"results":"14","hashOfConfig":"13"},{"size":2270,"mtime":1616007251095,"results":"15","hashOfConfig":"13"},{"size":7189,"mtime":1616098416365,"results":"16","hashOfConfig":"13"},{"size":553,"mtime":1615404600009,"results":"17","hashOfConfig":"13"},{"size":542,"mtime":1616040994116,"results":"18","hashOfConfig":"13"},{"size":766,"mtime":1616098209779,"results":"19","hashOfConfig":"13"},{"size":1517,"mtime":1615404600013,"results":"20","hashOfConfig":"13"},{"size":1445,"mtime":1616039673674,"results":"21","hashOfConfig":"13"},{"size":549,"mtime":1616055604281,"results":"22","hashOfConfig":"13"},{"size":861,"mtime":1616054368249,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1l4z5x1",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":2,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/index.js",[],["49","50"],"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/App.js",[],"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Join/Join.js",["51","52"],"import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'; // use to liink to chat server\n\nimport io from 'socket.io-client';\nimport \"./Join.css\";\nlet socket, socketID;\nconst ENDPOINT = 'localhost:5000';\n\n\nconst RegisterUser = ({userName, password})=> {\n    //console.log(\"On register frontend\")\n    socket = io(ENDPOINT);\n    socketID = socket.id\n        socket.emit('register', {userName: userName, password: password}, (error)=>{\n            if(error) alert(error);\n        })\n        return ()=> {\n            socket.emit('disconnect');\n            socket.removeAllListeners();\n            socket.off();\n        }\n        \n}\n\nconst LogInUser = ({userName, password})=> {\n    console.log(\"On login frontend\")\n    socket = io(ENDPOINT);\n    socketID = socket.id\n    socket.emit('login', {userName: userName, password: password}, (error)=>{\n        if(error) alert(error);\n    })\n    return ()=> {\n        socket.emit('disconnect');\n        socket.removeAllListeners();\n        socket.off();\n    }\n}\n\n\nconst Join = () => {\n\n    \n    const [name, setName] = useState('');\n    const [password, setPassword] = useState('');\n\n    const room = 'broadcast';\n\n   return(\n       <div className=\"joinOuterContainer\">\n           <div className=\"joinInnerContainer\">\n               <h1 className=\"heading\">Join</h1>\n               <div> <input placeholder=\"Name\" className=\"joinInput\" type=\"text\" onChange={(event)=> setName(event.target.value)} /> </div>\n               <div> <input placeholder=\"Password\" className=\"joinInput mt-20\" type=\"text\" onChange={(event)=> setPassword(event.target.value)} /> </div>\n               <Link onClick={(event)=>(!name || !password) ? event.preventDefault() : RegisterUser({userName: name, password: password}) } to={`/chat?name=${name}&room=${room}`}>\n                    <button className=\"button mt-20\" type=\"submit \">sign In</button>\n               </Link>\n               <Link onClick={(event)=>(!name || !password) ? event.preventDefault() : LogInUser({userName: name, password: password}) } to={`/chat?name=${name}&room=${room}`}>\n                    <button className=\"button mt-20\" type=\"submit \">Log In</button>\n               </Link>\n           </div>\n\n       </div>\n   ); \n};\n\nexport default Join;","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Chat/Chat.js",["53","54","55","56","57","58"],"import React, {useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\n\n\nimport './Chat.css';\n\nimport InfoBar          from '../InfoBar/InfoBar'\nimport Input            from '../Input/Input'\nimport Messages         from '../Messages/Messages'\nimport RoomUserList     from '../RoomUserList/RoomUserList'\nimport RoomInputField   from '../RoomInputField/RoomInputField'\nimport RoomList         from '../RoomList/RoomList'\nlet socket;\n\n\nconst Chat = ({ location }) => {\n\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('broadcast');\n    const [users, setUsers] = useState('');\n    const [message, setMessage] = useState(''); // track state of a single message\n    const [messages, setMessages] = useState([]);// track state of all the messages\n    const ENDPOINT = 'localhost:5000';\n\n\n\n    const [roomName, setRoomName] = useState(''); // roomName to be send to server\n    const [allRooms, setAllRooms] = useState(['r/broadcast'])\n    const [type, setType] = useState('r') // type can be r or u\n    //const [messageStore, setMessageStore] = useState([{room: 'r/broadcast', messages: []}])\n    let temporary;\n    const messageStore = [{room: 'r/broadcast', messages: []}]\n    useEffect(()=>{\n\n        const { name, room } = queryString.parse(location.search);\n        // returns a json and we are restructing the object to name=name and room=room\n        // we also could have const data = ... and data.room or data.name\n        \n        socket = io(ENDPOINT);\n        setName(name);\n\n        if(type === 'r'){\n            socket.emit('join', {name: name, room: room}, (error)=>{\n                if(error) alert(error);\n            }); // eventName, actual payload\n        }\n\n        if(type === 'u')\n        {\n            socket.emit('join_private_chat', {otherPersonName: room}, (error)=> {\n                if(error) \n                    alert(error)\n            })\n        }\n        \n       \n        // this return statement is used for unmounting of the data\n\n        // return ()=> {\n        //     socket.emit(\"disconnect\");\n        //     socket.off();\n        // } ;\n\n    }, [ENDPOINT, location.search, room]);\n    // basically if they changes we need to rerender the whole part\n\n\n\n    // hooks for handling messages\n    useEffect(()=> {\n\n        socket.on('message',(message)=>{\n             // admin generated messages\n             //setMessages(messages => [...messages, message]);\n\n             const messageToStore = {user: message.user, text: message.text}\n             const currRoom = 'r/'.concat(message.room)\n\n            //  setMessageStore(messageStore => {\n            //     const nowRoomIndex = messageStore.findIndex((obj)=> obj.room === currRoom)\n            //     if(nowRoomIndex !== -1)\n            //         messageStore[nowRoomIndex].messages.push(messageToStore)\n\n            //     else{\n            //         messageStore.push({room: `${currRoom}`, users: []})\n            //         const len = messageStore.length()\n\n            //         messageStore[len-1].messages.push(messageToStore)\n            //     }\n            //  })\n\n            const nowRoomIndex = messageStore.findIndex((obj)=> obj.room === currRoom)\n            if(nowRoomIndex !== -1){\n                messageStore[nowRoomIndex].messages.push(messageToStore)\n                setMessages([...messageStore[nowRoomIndex].messages])\n            }\n            else{\n                messageStore.push({room: `${currRoom}`, messages: []})\n                const len = messageStore.length()\n                messageStore[len-1].messages.push(messageToStore)\n                setMessages([...messageStore[len-1].messages])\n            }\n\n        });\n\n        socket.on(\"roomData\", ({room: room, users: users }) => {\n            setUsers(users);\n        });\n\n        socket.on(\"private_message\", (message)=> {\n            // setMessages(messages => [...messages, message]);\n            // setUsers('')\n            const currUserName = 'u/'.concat(message.user)\n            const nowUserIndex = messageStore.findIndex((obj)=> obj.room === currUserName)\n            if(nowUserIndex !== -1)\n            {\n                // already found \n                messageStore[nowUserIndex].messages.push({user: message.user, text: message.text})\n                setMessages([...messageStore[nowUserIndex].messages])\n            }\n            else{\n                messageStore.push({room: `${currUserName}`, messages: []})\n                const len = messageStore.length()\n                messageStore[len-1].messages.push({user: message.user, text: message.text})\n                setMessages([...messageStore[len-1].messages])\n            }\n        })\n\n    }, []);\n\n    const sendMessage = (event)=> {\n        event.preventDefault();\n\n        if(message && type === 'r'){\n            socket.emit('sendMessage',{ room:room, message: message}, ()=> setMessage(''));\n            // 3rd parameter is a cleanup code for textField\n        }\n        else if(message && type == 'u'){\n            socket.emit('private_message', {myName: name, userName: room, message: message}, ()=> setMessage(''))\n        }\n        else{\n            alert(\"Invalid userName\")\n        }\n    }\n\n    const addRoom = (event)=>{\n        event.preventDefault();\n        if(roomName && roomName.startsWith('r/'))\n        {\n            //socket.emit('join',{name: name , room: roomName.substring(2)})\n            \n\n            setAllRooms(allRooms => [...allRooms, roomName])\n            setType('r')\n            setRoom(roomName.substring(2))\n            setRoomName(\"\") // hopefully does the cleanup\n            setMessages([])\n            //console.log(allRooms)\n        }\n\n        else if(roomName && roomName.startsWith('u/'))\n        {\n            //socket.emit('join private chat', {otherPersonName: roomName.substring(2)})\n            setAllRooms(allRooms => [...allRooms, roomName])\n            setType('u')\n            setRoom(roomName.substring(2))\n            setRoomName(\"\") // hopefully does the cleanup\n            setMessages([])\n        }\n        else\n        {\n            setRoomName(\"\")\n            alert(\"Invalid name!!!\")\n        }\n        //console.log(\"hello!\")\n    }\n    \n    return (\n        <div className='outerContainer'>\n            <div className='roomsOfAUser'>\n                <RoomInputField room= {roomName} setRoom ={setRoomName} addRoom={addRoom}/>\n                <RoomList allRooms={allRooms} addRoom={addRoom}/> \n            </div>\n\n            <div className='container'> \n                <InfoBar room={ room }/>\n                <Messages messages={messages} type= {type} name={name} room={room} />\n                <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n                \n                {/* <input \n                value={message} \n                onChange={(event)=> setMessage(event.target.value)}\n                onKeyPress= {(event)=> event.key === 'Enter' ? sendMessage(event) : null}  */}\n            </div>\n\n            <div className='roomUserLists'>\n            <RoomUserList users={users}/>\n            </div>\n           \n        </div>\n    )\n};\nexport default Chat;","/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/InfoBar/InfoBar.js",[],"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Input/Input.js",[],"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Messages/Messages.js",[],"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/Messages/Message/Message.js",[],"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/RoomUserList/RoomUserList.js",[],"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/RoomInputField/RoomInputField.js",[],"/home/soumalya/Desktop/MotherFolder/TakaTalk IT assignment 2/client/src/components/RoomList/RoomList.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":1,"column":17,"nodeType":"65","messageId":"66","endLine":1,"endColumn":26},{"ruleId":"63","severity":1,"message":"67","line":28,"column":5,"nodeType":"65","messageId":"66","endLine":28,"endColumn":13},{"ruleId":"63","severity":1,"message":"68","line":32,"column":9,"nodeType":"65","messageId":"66","endLine":32,"endColumn":18},{"ruleId":"69","severity":1,"message":"70","line":65,"column":8,"nodeType":"71","endLine":65,"endColumn":41,"suggestions":"72"},{"ruleId":"73","severity":1,"message":"74","line":107,"column":33,"nodeType":"75","messageId":"76","endLine":107,"endColumn":43,"fix":"77"},{"ruleId":"73","severity":1,"message":"78","line":107,"column":45,"nodeType":"75","messageId":"76","endLine":107,"endColumn":57,"fix":"79"},{"ruleId":"69","severity":1,"message":"80","line":130,"column":8,"nodeType":"71","endLine":130,"endColumn":10,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":139,"column":33,"nodeType":"84","messageId":"85","endLine":139,"endColumn":35},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'socketID' is assigned a value but never used.","'temporary' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.","ArrayExpression",["88"],"no-useless-rename","Destructuring assignment room unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"89","text":"90"},"Destructuring assignment users unnecessarily renamed.",{"range":"91","text":"92"},"React Hook useEffect has a missing dependency: 'messageStore'. Either include it or remove the dependency array.",["93"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},[3758,3768],"room",[3770,3782],"users",{"desc":"96","fix":"97"},"Update the dependencies array to be: [ENDPOINT, location.search, room, type]",{"range":"98","text":"99"},"Update the dependencies array to be: [messageStore]",{"range":"100","text":"101"},[2164,2197],"[ENDPOINT, location.search, room, type]",[4724,4726],"[messageStore]"]