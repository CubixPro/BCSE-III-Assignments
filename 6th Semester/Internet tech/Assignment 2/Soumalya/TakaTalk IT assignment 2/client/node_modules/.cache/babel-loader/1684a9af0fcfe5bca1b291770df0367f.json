{"ast":null,"code":"var _jsxFileName = \"/home/soumalya/Desktop/MotherFolder/6th sem/Internet Tech/Assignment 2/Project/client/src/components/Chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState(''); // track state of a single message\n\n  const [messages, setMessages] = useState([]); // track state of all the messages\n\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search); // returns a json and we are restructing the object to name=name and room=room\n    // we also could have const data = ... and data.room or data.name\n\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name: name,\n      room: room\n    }, error => {\n      if (error) alert(error);\n    }); // eventName, actual payload\n    // this return statement is used for unmounting of the data\n\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]); // basically if they changes we need to rerender the whole part\n  // hooks for handling messages\n\n  useEffect(() => {\n    socket.on('message', message => {\n      // admin generated messages\n      setMessages([...messages, message]);\n    });\n  }, [messages]);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage('')); // 3rd parameter is a cleanup code for textField\n    }\n  };\n\n  console.log(message, messages);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: \"/>\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"M7DGl/NqV6luCY8IpJPKHYFo+ZU=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/soumalya/Desktop/MotherFolder/6th sem/Internet Tech/Assignment 2/Project/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","io","queryString","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","error","alert","off","on","sendMessage","event","preventDefault","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,WAAP,MAAwB,cAAxB;;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAE3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC,CAJ2B,CAIiB;;AAC5C,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC,CAL2B,CAKkB;;AAC7C,QAAMe,QAAQ,GAAG,gBAAjB;AAGAd,EAAAA,SAAS,CAAC,MAAI;AAEV,UAAM;AAAEM,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBN,WAAW,CAACa,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAAvB,CAFU,CAGV;AACA;;AAEAb,IAAAA,MAAM,GAAGF,EAAE,CAACa,QAAD,CAAX;AACAP,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoB;AAACX,MAAAA,IAAI,EAAEA,IAAP;AAAaE,MAAAA,IAAI,EAAEA;AAAnB,KAApB,EAA+CU,KAAD,IAAS;AACnD,UAAGA,KAAH,EAAUC,KAAK,CAACD,KAAD,CAAL;AACb,KAFD,EAVU,CAYN;AAEJ;;AAEA,WAAO,MAAK;AACRf,MAAAA,MAAM,CAACc,IAAP,CAAY,YAAZ;AACAd,MAAAA,MAAM,CAACiB,GAAP;AACH,KAHD;AAKH,GArBQ,EAqBN,CAACN,QAAD,EAAWT,QAAQ,CAACW,MAApB,CArBM,CAAT,CAT2B,CA+B3B;AAIA;;AACAhB,EAAAA,SAAS,CAAC,MAAK;AAEXG,IAAAA,MAAM,CAACkB,EAAP,CAAU,SAAV,EAAqBX,OAAD,IAAW;AAC1B;AACAG,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcF,OAAd,CAAD,CAAX;AACJ,KAHD;AAKH,GAPQ,EAON,CAACE,QAAD,CAPM,CAAT;;AASA,QAAMU,WAAW,GAAIC,KAAD,IAAU;AAC1BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAGd,OAAH,EAAW;AACPP,MAAAA,MAAM,CAACc,IAAP,CAAY,aAAZ,EAA2BP,OAA3B,EAAoC,MAAKC,UAAU,CAAC,EAAD,CAAnD,EADO,CAEP;AACH;AACJ,GAPD;;AASAc,EAAAA,OAAO,CAACC,GAAR,CAAYhB,OAAZ,EAAqBE,QAArB;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CAlED;;GAAMR,I;;KAAAA,I;AAmEN,eAAeA,IAAf","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport queryString from 'query-string';\n\nlet socket;\n\nconst Chat = ({ location }) => {\n\n    const [name, setName] = useState('');\n    const [room, setRoom] = useState('');\n    const [message, setMessage] = useState(''); // track state of a single message\n    const [messages, setMessages] = useState([]);// track state of all the messages\n    const ENDPOINT = 'localhost:5000';\n        \n\n    useEffect(()=>{\n\n        const { name, room } = queryString.parse(location.search);\n        // returns a json and we are restructing the object to name=name and room=room\n        // we also could have const data = ... and data.room or data.name\n        \n        socket = io(ENDPOINT);\n        setName(name);\n        setRoom(room);\n\n        socket.emit('join', {name: name, room: room}, (error)=>{\n            if(error) alert(error);\n        }); // eventName, actual payload\n       \n        // this return statement is used for unmounting of the data\n\n        return ()=> {\n            socket.emit(\"disconnect\");\n            socket.off();\n        } ;\n\n    }, [ENDPOINT, location.search]);\n    // basically if they changes we need to rerender the whole part\n\n\n\n    // hooks for handling messages\n    useEffect(()=> {\n\n        socket.on('message',(message)=>{\n             // admin generated messages\n             setMessages([...messages, message]);\n        });\n\n    }, [messages]);\n\n    const sendMessage = (event)=> {\n        event.preventDefault();\n\n        if(message){\n            socket.emit('sendMessage', message, ()=> setMessage(''));\n            // 3rd parameter is a cleanup code for textField\n        }\n    }\n\n    console.log(message, messages)\n    return (\n        <div className='outerContainer'>\n            <div className='container'> \n                {/* <input \n                value={message} \n                onChange={(event)=> setMessage(event.target.value)}\n                onKeyPress= {(event)=> event.key === 'Enter' ? sendMessage(event) : null}  */}\n                />\n            </div>\n        </div>\n    )\n};\nexport default Chat;"]},"metadata":{},"sourceType":"module"}