"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _AutoHideFollowButton = _interopRequireDefault(require("./ScrollToBottom/AutoHideFollowButton"));

var _Composer = _interopRequireDefault(require("./ScrollToBottom/Composer"));

var _Panel = _interopRequireDefault(require("./ScrollToBottom/Panel"));

var _useStyleToClassName = _interopRequireDefault(require("./hooks/internal/useStyleToClassName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ROOT_STYLE = {
  position: 'relative'
};

var BasicScrollToBottomCore = function BasicScrollToBottomCore(_ref) {
  var children = _ref.children,
      className = _ref.className,
      followButtonClassName = _ref.followButtonClassName,
      scrollViewClassName = _ref.scrollViewClassName;
  var rootCSS = (0, _useStyleToClassName.default)()(ROOT_STYLE);
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(rootCSS, (className || '') + '')
  }, /*#__PURE__*/_react.default.createElement(_Panel.default, {
    className: (scrollViewClassName || '') + ''
  }, children), /*#__PURE__*/_react.default.createElement(_AutoHideFollowButton.default, {
    className: (followButtonClassName || '') + ''
  }));
};

BasicScrollToBottomCore.defaultProps = {
  children: undefined,
  className: undefined,
  followButtonClassName: undefined,
  scrollViewClassName: undefined
};
BasicScrollToBottomCore.propTypes = {
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  followButtonClassName: _propTypes.default.string,
  scrollViewClassName: _propTypes.default.string
};

var BasicScrollToBottom = function BasicScrollToBottom(_ref2) {
  var checkInterval = _ref2.checkInterval,
      children = _ref2.children,
      className = _ref2.className,
      debounce = _ref2.debounce,
      debug = _ref2.debug,
      followButtonClassName = _ref2.followButtonClassName,
      initialScrollBehavior = _ref2.initialScrollBehavior,
      mode = _ref2.mode,
      nonce = _ref2.nonce,
      scroller = _ref2.scroller,
      scrollViewClassName = _ref2.scrollViewClassName;
  return /*#__PURE__*/_react.default.createElement(_Composer.default, {
    checkInterval: checkInterval,
    debounce: debounce,
    debug: debug,
    initialScrollBehavior: initialScrollBehavior,
    mode: mode,
    nonce: nonce,
    scroller: scroller
  }, /*#__PURE__*/_react.default.createElement(BasicScrollToBottomCore, {
    className: className,
    followButtonClassName: followButtonClassName,
    scrollViewClassName: scrollViewClassName
  }, children));
};

BasicScrollToBottom.defaultProps = {
  checkInterval: undefined,
  children: undefined,
  className: undefined,
  debounce: undefined,
  debug: false,
  followButtonClassName: undefined,
  initialScrollBehavior: 'smooth',
  mode: undefined,
  nonce: undefined,
  scrollViewClassName: undefined
};
BasicScrollToBottom.propTypes = {
  checkInterval: _propTypes.default.number,
  children: _propTypes.default.any,
  className: _propTypes.default.string,
  debounce: _propTypes.default.number,
  debug: _propTypes.default.bool,
  followButtonClassName: _propTypes.default.string,
  initialScrollBehavior: _propTypes.default.oneOf(['auto', 'smooth']),
  mode: _propTypes.default.oneOf(['bottom', 'top']),
  nonce: _propTypes.default.string,
  scrollViewClassName: _propTypes.default.string
};
var _default = BasicScrollToBottom;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9CYXNpY1Njcm9sbFRvQm90dG9tLmpzIl0sIm5hbWVzIjpbIlJPT1RfU1RZTEUiLCJwb3NpdGlvbiIsIkJhc2ljU2Nyb2xsVG9Cb3R0b21Db3JlIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJmb2xsb3dCdXR0b25DbGFzc05hbWUiLCJzY3JvbGxWaWV3Q2xhc3NOYW1lIiwicm9vdENTUyIsImRlZmF1bHRQcm9wcyIsInVuZGVmaW5lZCIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsImFueSIsInN0cmluZyIsIkJhc2ljU2Nyb2xsVG9Cb3R0b20iLCJjaGVja0ludGVydmFsIiwiZGVib3VuY2UiLCJkZWJ1ZyIsImluaXRpYWxTY3JvbGxCZWhhdmlvciIsIm1vZGUiLCJub25jZSIsInNjcm9sbGVyIiwibnVtYmVyIiwiYm9vbCIsIm9uZU9mIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxVQUFVLEdBQUc7QUFDakJDLEVBQUFBLFFBQVEsRUFBRTtBQURPLENBQW5COztBQUlBLElBQU1DLHVCQUF1QixHQUFHLFNBQTFCQSx1QkFBMEIsT0FBeUU7QUFBQSxNQUF0RUMsUUFBc0UsUUFBdEVBLFFBQXNFO0FBQUEsTUFBNURDLFNBQTRELFFBQTVEQSxTQUE0RDtBQUFBLE1BQWpEQyxxQkFBaUQsUUFBakRBLHFCQUFpRDtBQUFBLE1BQTFCQyxtQkFBMEIsUUFBMUJBLG1CQUEwQjtBQUN2RyxNQUFNQyxPQUFPLEdBQUcsb0NBQXNCUCxVQUF0QixDQUFoQjtBQUVBLHNCQUNFO0FBQUssSUFBQSxTQUFTLEVBQUUseUJBQVdPLE9BQVgsRUFBb0IsQ0FBQ0gsU0FBUyxJQUFJLEVBQWQsSUFBb0IsRUFBeEM7QUFBaEIsa0JBQ0UsNkJBQUMsY0FBRDtBQUFPLElBQUEsU0FBUyxFQUFFLENBQUNFLG1CQUFtQixJQUFJLEVBQXhCLElBQThCO0FBQWhELEtBQXFESCxRQUFyRCxDQURGLGVBRUUsNkJBQUMsNkJBQUQ7QUFBc0IsSUFBQSxTQUFTLEVBQUUsQ0FBQ0UscUJBQXFCLElBQUksRUFBMUIsSUFBZ0M7QUFBakUsSUFGRixDQURGO0FBTUQsQ0FURDs7QUFXQUgsdUJBQXVCLENBQUNNLFlBQXhCLEdBQXVDO0FBQ3JDTCxFQUFBQSxRQUFRLEVBQUVNLFNBRDJCO0FBRXJDTCxFQUFBQSxTQUFTLEVBQUVLLFNBRjBCO0FBR3JDSixFQUFBQSxxQkFBcUIsRUFBRUksU0FIYztBQUlyQ0gsRUFBQUEsbUJBQW1CLEVBQUVHO0FBSmdCLENBQXZDO0FBT0FQLHVCQUF1QixDQUFDUSxTQUF4QixHQUFvQztBQUNsQ1AsRUFBQUEsUUFBUSxFQUFFUSxtQkFBVUMsR0FEYztBQUVsQ1IsRUFBQUEsU0FBUyxFQUFFTyxtQkFBVUUsTUFGYTtBQUdsQ1IsRUFBQUEscUJBQXFCLEVBQUVNLG1CQUFVRSxNQUhDO0FBSWxDUCxFQUFBQSxtQkFBbUIsRUFBRUssbUJBQVVFO0FBSkcsQ0FBcEM7O0FBT0EsSUFBTUMsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixRQVl0QjtBQUFBLE1BWEpDLGFBV0ksU0FYSkEsYUFXSTtBQUFBLE1BVkpaLFFBVUksU0FWSkEsUUFVSTtBQUFBLE1BVEpDLFNBU0ksU0FUSkEsU0FTSTtBQUFBLE1BUkpZLFFBUUksU0FSSkEsUUFRSTtBQUFBLE1BUEpDLEtBT0ksU0FQSkEsS0FPSTtBQUFBLE1BTkpaLHFCQU1JLFNBTkpBLHFCQU1JO0FBQUEsTUFMSmEscUJBS0ksU0FMSkEscUJBS0k7QUFBQSxNQUpKQyxJQUlJLFNBSkpBLElBSUk7QUFBQSxNQUhKQyxLQUdJLFNBSEpBLEtBR0k7QUFBQSxNQUZKQyxRQUVJLFNBRkpBLFFBRUk7QUFBQSxNQURKZixtQkFDSSxTQURKQSxtQkFDSTtBQUNKLHNCQUNFLDZCQUFDLGlCQUFEO0FBQ0UsSUFBQSxhQUFhLEVBQUVTLGFBRGpCO0FBRUUsSUFBQSxRQUFRLEVBQUVDLFFBRlo7QUFHRSxJQUFBLEtBQUssRUFBRUMsS0FIVDtBQUlFLElBQUEscUJBQXFCLEVBQUVDLHFCQUp6QjtBQUtFLElBQUEsSUFBSSxFQUFFQyxJQUxSO0FBTUUsSUFBQSxLQUFLLEVBQUVDLEtBTlQ7QUFPRSxJQUFBLFFBQVEsRUFBRUM7QUFQWixrQkFTRSw2QkFBQyx1QkFBRDtBQUNFLElBQUEsU0FBUyxFQUFFakIsU0FEYjtBQUVFLElBQUEscUJBQXFCLEVBQUVDLHFCQUZ6QjtBQUdFLElBQUEsbUJBQW1CLEVBQUVDO0FBSHZCLEtBS0dILFFBTEgsQ0FURixDQURGO0FBbUJELENBaENEOztBQWtDQVcsbUJBQW1CLENBQUNOLFlBQXBCLEdBQW1DO0FBQ2pDTyxFQUFBQSxhQUFhLEVBQUVOLFNBRGtCO0FBRWpDTixFQUFBQSxRQUFRLEVBQUVNLFNBRnVCO0FBR2pDTCxFQUFBQSxTQUFTLEVBQUVLLFNBSHNCO0FBSWpDTyxFQUFBQSxRQUFRLEVBQUVQLFNBSnVCO0FBS2pDUSxFQUFBQSxLQUFLLEVBQUUsS0FMMEI7QUFNakNaLEVBQUFBLHFCQUFxQixFQUFFSSxTQU5VO0FBT2pDUyxFQUFBQSxxQkFBcUIsRUFBRSxRQVBVO0FBUWpDQyxFQUFBQSxJQUFJLEVBQUVWLFNBUjJCO0FBU2pDVyxFQUFBQSxLQUFLLEVBQUVYLFNBVDBCO0FBVWpDSCxFQUFBQSxtQkFBbUIsRUFBRUc7QUFWWSxDQUFuQztBQWFBSyxtQkFBbUIsQ0FBQ0osU0FBcEIsR0FBZ0M7QUFDOUJLLEVBQUFBLGFBQWEsRUFBRUosbUJBQVVXLE1BREs7QUFFOUJuQixFQUFBQSxRQUFRLEVBQUVRLG1CQUFVQyxHQUZVO0FBRzlCUixFQUFBQSxTQUFTLEVBQUVPLG1CQUFVRSxNQUhTO0FBSTlCRyxFQUFBQSxRQUFRLEVBQUVMLG1CQUFVVyxNQUpVO0FBSzlCTCxFQUFBQSxLQUFLLEVBQUVOLG1CQUFVWSxJQUxhO0FBTTlCbEIsRUFBQUEscUJBQXFCLEVBQUVNLG1CQUFVRSxNQU5IO0FBTzlCSyxFQUFBQSxxQkFBcUIsRUFBRVAsbUJBQVVhLEtBQVYsQ0FBZ0IsQ0FBQyxNQUFELEVBQVMsUUFBVCxDQUFoQixDQVBPO0FBUTlCTCxFQUFBQSxJQUFJLEVBQUVSLG1CQUFVYSxLQUFWLENBQWdCLENBQUMsUUFBRCxFQUFXLEtBQVgsQ0FBaEIsQ0FSd0I7QUFTOUJKLEVBQUFBLEtBQUssRUFBRVQsbUJBQVVFLE1BVGE7QUFVOUJQLEVBQUFBLG1CQUFtQixFQUFFSyxtQkFBVUU7QUFWRCxDQUFoQztlQWFlQyxtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBBdXRvSGlkZUZvbGxvd0J1dHRvbiBmcm9tICcuL1Njcm9sbFRvQm90dG9tL0F1dG9IaWRlRm9sbG93QnV0dG9uJztcbmltcG9ydCBDb21wb3NlciBmcm9tICcuL1Njcm9sbFRvQm90dG9tL0NvbXBvc2VyJztcbmltcG9ydCBQYW5lbCBmcm9tICcuL1Njcm9sbFRvQm90dG9tL1BhbmVsJztcbmltcG9ydCB1c2VTdHlsZVRvQ2xhc3NOYW1lIGZyb20gJy4vaG9va3MvaW50ZXJuYWwvdXNlU3R5bGVUb0NsYXNzTmFtZSc7XG5cbmNvbnN0IFJPT1RfU1RZTEUgPSB7XG4gIHBvc2l0aW9uOiAncmVsYXRpdmUnXG59O1xuXG5jb25zdCBCYXNpY1Njcm9sbFRvQm90dG9tQ29yZSA9ICh7IGNoaWxkcmVuLCBjbGFzc05hbWUsIGZvbGxvd0J1dHRvbkNsYXNzTmFtZSwgc2Nyb2xsVmlld0NsYXNzTmFtZSB9KSA9PiB7XG4gIGNvbnN0IHJvb3RDU1MgPSB1c2VTdHlsZVRvQ2xhc3NOYW1lKCkoUk9PVF9TVFlMRSk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lcyhyb290Q1NTLCAoY2xhc3NOYW1lIHx8ICcnKSArICcnKX0+XG4gICAgICA8UGFuZWwgY2xhc3NOYW1lPXsoc2Nyb2xsVmlld0NsYXNzTmFtZSB8fCAnJykgKyAnJ30+e2NoaWxkcmVufTwvUGFuZWw+XG4gICAgICA8QXV0b0hpZGVGb2xsb3dCdXR0b24gY2xhc3NOYW1lPXsoZm9sbG93QnV0dG9uQ2xhc3NOYW1lIHx8ICcnKSArICcnfSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuQmFzaWNTY3JvbGxUb0JvdHRvbUNvcmUuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogdW5kZWZpbmVkLFxuICBjbGFzc05hbWU6IHVuZGVmaW5lZCxcbiAgZm9sbG93QnV0dG9uQ2xhc3NOYW1lOiB1bmRlZmluZWQsXG4gIHNjcm9sbFZpZXdDbGFzc05hbWU6IHVuZGVmaW5lZFxufTtcblxuQmFzaWNTY3JvbGxUb0JvdHRvbUNvcmUucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueSxcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBmb2xsb3dCdXR0b25DbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNjcm9sbFZpZXdDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cbmNvbnN0IEJhc2ljU2Nyb2xsVG9Cb3R0b20gPSAoe1xuICBjaGVja0ludGVydmFsLFxuICBjaGlsZHJlbixcbiAgY2xhc3NOYW1lLFxuICBkZWJvdW5jZSxcbiAgZGVidWcsXG4gIGZvbGxvd0J1dHRvbkNsYXNzTmFtZSxcbiAgaW5pdGlhbFNjcm9sbEJlaGF2aW9yLFxuICBtb2RlLFxuICBub25jZSxcbiAgc2Nyb2xsZXIsXG4gIHNjcm9sbFZpZXdDbGFzc05hbWVcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q29tcG9zZXJcbiAgICAgIGNoZWNrSW50ZXJ2YWw9e2NoZWNrSW50ZXJ2YWx9XG4gICAgICBkZWJvdW5jZT17ZGVib3VuY2V9XG4gICAgICBkZWJ1Zz17ZGVidWd9XG4gICAgICBpbml0aWFsU2Nyb2xsQmVoYXZpb3I9e2luaXRpYWxTY3JvbGxCZWhhdmlvcn1cbiAgICAgIG1vZGU9e21vZGV9XG4gICAgICBub25jZT17bm9uY2V9XG4gICAgICBzY3JvbGxlcj17c2Nyb2xsZXJ9XG4gICAgPlxuICAgICAgPEJhc2ljU2Nyb2xsVG9Cb3R0b21Db3JlXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICBmb2xsb3dCdXR0b25DbGFzc05hbWU9e2ZvbGxvd0J1dHRvbkNsYXNzTmFtZX1cbiAgICAgICAgc2Nyb2xsVmlld0NsYXNzTmFtZT17c2Nyb2xsVmlld0NsYXNzTmFtZX1cbiAgICAgID5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9CYXNpY1Njcm9sbFRvQm90dG9tQ29yZT5cbiAgICA8L0NvbXBvc2VyPlxuICApO1xufTtcblxuQmFzaWNTY3JvbGxUb0JvdHRvbS5kZWZhdWx0UHJvcHMgPSB7XG4gIGNoZWNrSW50ZXJ2YWw6IHVuZGVmaW5lZCxcbiAgY2hpbGRyZW46IHVuZGVmaW5lZCxcbiAgY2xhc3NOYW1lOiB1bmRlZmluZWQsXG4gIGRlYm91bmNlOiB1bmRlZmluZWQsXG4gIGRlYnVnOiBmYWxzZSxcbiAgZm9sbG93QnV0dG9uQ2xhc3NOYW1lOiB1bmRlZmluZWQsXG4gIGluaXRpYWxTY3JvbGxCZWhhdmlvcjogJ3Ntb290aCcsXG4gIG1vZGU6IHVuZGVmaW5lZCxcbiAgbm9uY2U6IHVuZGVmaW5lZCxcbiAgc2Nyb2xsVmlld0NsYXNzTmFtZTogdW5kZWZpbmVkXG59O1xuXG5CYXNpY1Njcm9sbFRvQm90dG9tLnByb3BUeXBlcyA9IHtcbiAgY2hlY2tJbnRlcnZhbDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnksXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVib3VuY2U6IFByb3BUeXBlcy5udW1iZXIsXG4gIGRlYnVnOiBQcm9wVHlwZXMuYm9vbCxcbiAgZm9sbG93QnV0dG9uQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBpbml0aWFsU2Nyb2xsQmVoYXZpb3I6IFByb3BUeXBlcy5vbmVPZihbJ2F1dG8nLCAnc21vb3RoJ10pLFxuICBtb2RlOiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAndG9wJ10pLFxuICBub25jZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc2Nyb2xsVmlld0NsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQmFzaWNTY3JvbGxUb0JvdHRvbTtcbiJdfQ==